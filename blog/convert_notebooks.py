#!/usr/bin/env python3
"""Convert notebooks in blog/notebooks/ to HTML pages in blog/site/
Generates a simple index.html with links to converted notebooks.
"""
import os
import sys
from pathlib import Path

try:
    import nbformat
    from nbconvert import HTMLExporter
except Exception as e:
    sys.exit("This script requires 'nbformat' and 'nbconvert'. Install with: pip install nbformat nbconvert")

ROOT = Path(__file__).resolve().parent
NOTEBOOKS_DIR = ROOT / 'notebooks'
OUT_DIR = ROOT / 'site'

def ensure_dirs():
    OUT_DIR.mkdir(parents=True, exist_ok=True)
    (OUT_DIR / 'assets').mkdir(exist_ok=True)


def convert_notebook(nb_path: Path) -> Path:
    """Convert a single notebook and return output html path."""
    print(f"Converting {nb_path.name}...")
    nb = nbformat.read(str(nb_path), as_version=4)
    exporter = HTMLExporter()
    exporter.template_name = 'lab' if hasattr(exporter, 'template_name') else None
    body, resources = exporter.from_notebook_node(nb)
    out_name = nb_path.stem + '.html'
    out_path = OUT_DIR / out_name
    out_path.write_text(body, encoding='utf-8')
    print(f"Wrote {out_path}")
    return out_path


def cleanup_stale_files(expected_names):
    """Remove HTML files in OUT_DIR that are not in expected_names (except index.html).
    expected_names should be a set of filenames (e.g. {'a.html','b.html'})
    """
    removed = []
    for f in OUT_DIR.glob('*.html'):
        if f.name == 'index.html':
            continue
        if f.name not in expected_names:
            try:
                f.unlink()
                removed.append(f.name)
            except Exception as e:
                print(f"Failed to remove {f}: {e}")
    if removed:
        print('Removed stale files:', ', '.join(removed))


def generate_index(pages):
    html = ['<!doctype html>', '<html lang="en">', '<head>', '  <meta charset="utf-8" />', '  <meta name="viewport" content="width=device-width,initial-scale=1" />', '  <title>Notebooks</title>', '  <style>body{font-family:system-ui,Arial;max-width:900px;margin:2rem auto;padding:1rem;color:#0f1724} a{color:#2563eb}</style>', '</head>', '<body>', '<h1>Notebook Blog</h1>', '<p>Converted notebooks:</p>', '<ul>']
    for p in pages:
        html.append(f'  <li><a href="{p.name}">{p.stem}</a></li>')
    html.extend(['</ul>', '<hr>', '<p>Generated by convert_notebooks.py</p>', '</body>', '</html>'])
    (OUT_DIR / 'index.html').write_text('\n'.join(html), encoding='utf-8')
    print('Wrote index.html')


def main():
    ensure_dirs()
    if not NOTEBOOKS_DIR.exists():
        print('No notebooks folder found. Create profile-site/blog/notebooks and add .ipynb files.')
        return
    pages = []
    notebooks = sorted(NOTEBOOKS_DIR.glob('*.ipynb'))
    for nb in notebooks:
        out = convert_notebook(nb)
        pages.append(out)
    if not pages:
        print('No notebooks found to convert.')
        return
    # Build index with current pages
    generate_index(pages)

    # Cleanup stale html files that don't match existing notebooks
    expected = set(p.name for p in pages)
    cleanup_stale_files(expected)

if __name__ == '__main__':
    main()
